// Generated by CoffeeScript 1.7.1
(function() {
  var app, cluster, connect, defaultsettings, express, fs, generateId, http, jade, mime, os, path, rc, redis, server, settings, setupMaster, shorten, _;

  defaultsettings = "/settings-dev.js";

  if (process.argv[2] != null) {
    defaultsettings = "/settings-" + process.argv[2];
  }

  settings = require(__dirname + defaultsettings);

  process.on("error", function(err) {
    return console.log("error", err);
  });

  cluster = require("cluster");

  os = require("os");

  setupMaster = function() {
    var i;
    if (settings.env === "development") {
      cluster.fork();
    } else {
      i = 0;
      while (i < settings.num_node_process) {
        cluster.fork();
        i++;
      }
    }
    return cluster.on("exit", function(worker, code, signal) {
      return console.log("worker " + worker.process.pid + " died");
    });
  };

  generateId = function(linkset, callback) {
    var chars, id, keyLength;
    id = "";
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    keyLength = 1;
    rc.scard(linkset, function(error, response) {
      var i;
      while (Math.pow(chars.length, keyLength) / 2 < response) {
        keyLength++;
      }
      i = 0;
      while (i < keyLength) {
        id += chars[Math.floor(Math.random() * chars.length)];
        i++;
      }
      callback(id);
    });
  };

  shorten = function(linkset, long, callback) {
    var response;
    if (long == null) {
      response = {
        status: "ERROR",
        message: "Invalid URL: " + long
      };
      if (typeof callback === "function") {
        callback(response);
      }
      return false;
    }
    generateId(linkset, function(newId) {
      rc.setnx(linkset + ":" + newId, long, function(err, res) {
        if (res) {
          response = {
            status: "OK",
            id: newId,
            long: long
          };
          return rc.sadd(linkset, newId, function() {
            return callback(response);
          });
        } else {
          return shorten(linkset, long, callback);
        }
      });
    });
    return;
  };

  if (cluster.isMaster) {
    setupMaster();
  }

  if (cluster.isWorker) {
    express = require("express");
    jade = require("jade");
    app = express();
    http = require("http");
    server = http.createServer(app);
    redis = require("redis");
    path = require("path");
    connect = require("connect");
    rc = redis.createClient(settings.redis_port, settings.redis_host);
    fs = require("fs");
    _ = require("underscore");
    mime = require("simple-mime")("text/plain");
    app.configure(function() {
      app.set("view engine", "jade");
      app.set("view options", {
        layout: false
      });
      app.set("views", __dirname + "/views");
      app.use(express.json());
      app.use(express.limit(1048576 * settings.max_upload_mb));
      app.use(express.bodyParser({
        uploadDir: __dirname + '/static/uploads',
        keepExtensions: true
      }));
      app.use(express.favicon(__dirname + "/static/icons/favicon.ico"));
      app.use("/static", express["static"](__dirname + "/static"));
      app.get('/', function(req, res) {
        res.render('index', null);
      });
      app.get('/video/:id', function(req, res) {
        var fileHashKey, id;
        id = req.param("id");
        fileHashKey = "hfile:" + "video" + ":" + id;
        rc.hmget(fileHashKey, "filename", function(err, filename) {
          res.render('video', {
            id: req.param("id"),
            vid: filename.toString(),
            share_subject: "check out this video on vids.d8.io",
            share_link: "https://vids.d8.io/video/" + id
          });
        });
      });
      return app.post('/submit', function(req, res) {
        var filename, local_filename, type;
        console.log(req.files.path);
        local_filename = req.files.uploadfile.path;
        filename = path.basename(local_filename);
        type = "video";
        shorten("video", "placeholder", function(data) {
          var fileHashKey, videoid;
          videoid = data.id;
          fileHashKey = "hfile:" + type + ":" + videoid;
          rc.zadd("zfile:" + type, Math.round((new Date()).getTime() / 1000), videoid, function(err, data) {
            if (err) {
              fn(new Error("write zfile", "uploadFile"));
            }
            rc.hmset(fileHashKey, {
              local_filename: local_filename,
              filename: filename,
              id: videoid,
              type: type
            }, function(err, hmsetdata) {
              return res.redirect("video/" + videoid);
            });
          });
        });
      });
    });
    server.listen(settings.node_port + cluster.worker.id);
  }

}).call(this);
